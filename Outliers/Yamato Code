drop view averages_for_categories
create view averages_for_categories as
SELECT
    a.livesync_dbname,
    category_id,
    mysql_search_rooms_num,
    region_id,
    subregion_id,
    city_id,
    --case when district_id is null then 999999 else district_id end as district_id ,
    count(distinct a.id) as ads,
    avg(mysql_search_price) as price,
    avg(mysql_search_m) as meters
FROM
  main.db_atlas_verticals.users u
  INNER JOIN main.db_atlas_verticals.ads a ON u.id=a.user_id
  and a.livesync_dbname = u.livesync_dbname
WHERE type = 'confirmed' AND status = 'active'
and a.livesync_dbname in  ('imovirtualpt','otodompl','otodomua','storiaro')
GROUP BY
    a.livesync_dbname,
    category_id,
    mysql_search_rooms_num,
    region_id,
    subregion_id,
    city_id
    --case when district_id is null then 999999 else district_id end


select * from main.db_atlas_verticals.ads a where
status = 'active'
and a.livesync_dbname in  ('imovirtualpt','otodompl','otodomua','storiaro')
 and mysql_search_m is null


------------------------------ Check volumes

select count(*) as groups, sum(ads) as ads,
case when ads <= 20 then 20 when ads <= 50 then 50 when ads <= 100 then 100 else 101 end as samplesize,
case when price is null then 1 else 0 end as nullprice, -- There are no null prices
case when meters is null then 1 else 0 end as nullmeters, -- There are no null meters
case when price =0 then 1 else 0 end as zeroprice,
case when meters =0 then 1 else 0 end as zerometers,
livesync_dbname
from averages_for_categories
GROUP BY
case when ads <= 20 then 20 when ads <= 50 then 50 when ads <= 100 then 100 else 101 end,
case when price is null then 1 else 0 end ,
case when meters is null then 1 else 0 end  ,
case when price =0 then 1 else 0 end  ,
case when meters =0 then 1 else 0 end  ,
livesync_dbname



drop view ads_vs_averages
create view ads_vs_averages as
SELECT
    a.livesync_dbname,
    a.category_id,
    a.mysql_search_rooms_num,
    a.region_id,
    a.subregion_id,
    a.city_id,
    --a.district_id,
    a.id,
    mysql_search_price,
    mysql_search_m,
    b.ads,
    b.price as avg_price,
    b.meters as avg_meters,
    case when mysql_search_price <= 0 or mysql_search_price is null then 1 else 0 end as price_zero,
    case when mysql_search_m <= 0 or mysql_search_m is null then 1 else 0 end as meters_zero,

    case when b.price <= 0 or b.price is null then 1 else 0 end as price_avg_zero,
    case when b.meters <= 0 or b.meters  is null then 1 else 0 end as meters_avg_zero,


    case when (case when b.price > 0 then mysql_search_price/b.price else null end) < 1
         then 'prices_smaller_than_avg'
         else 'prices_higher_than_avg' end as category_price,
    case when (case when b.price > 0 then mysql_search_price/b.price else null end) < 1
         then case when mysql_search_price > 0
              then b.price/mysql_search_price else null end
          else case when b.price > 0 then mysql_search_price/b.price else null end end as final_price,

    case when (case when b.meters > 0 then mysql_search_m/b.meters else null end) < 1
         then 'prices_smaller_than_avg'
         else 'prices_higher_than_avg' end as category_meters,
    case when (case when b.meters > 0 then mysql_search_m/b.meters else null end) < 1
         then case when mysql_search_m > 0
              then b.meters/mysql_search_m else null end
          else case when b.meters > 0 then mysql_search_m/b.meters else null end end as final_meters

FROM
  main.db_atlas_verticals.users u
  INNER JOIN main.db_atlas_verticals.ads a ON u.id=a.user_id
  and a.livesync_dbname = u.livesync_dbname
  LEFT JOIN averages_for_categories b on
  a.livesync_dbname = b.livesync_dbname
  and a.category_id = b.category_id
  and a.mysql_search_rooms_num = b.mysql_search_rooms_num
  and a.region_id = b.region_id
  and a.subregion_id = b.subregion_id
  and a.city_id = b.city_id
  --and a.district_id = b.district_id
WHERE type = 'confirmed' AND status = 'active'
and a.livesync_dbname in  ('imovirtualpt','otodompl','otodomua','storiaro')

select * from ads_vs_averages
where final_meters > 120


select count(distinct id),
livesync_dbname,
category_id,
category_price,
category_meters,
case when ads <= 20 then 20 when ads <= 50 then 50 when ads <= 100 then 100 else 101 end as samplesize,
case when round(final_price) <= 5 then round(final_price)
when round(final_price) <= 10 then 10
when round(final_price) <= 20 then 20
when round(final_price) <= 50 then 50
when round(final_price) <= 100 then 100
else 101 end as multiplier_price,

case when round(final_meters) <= 5 then round(final_meters)
when round(final_meters) <= 10 then 10
when round(final_meters) <= 20 then 20
when round(final_meters) <= 50 then 50
when round(final_meters) <= 100 then 100
else 101 end as multiplier_meters,

price_zero,
meters_zero
from ads_vs_averages
where price_avg_zero = 0 and meters_avg_zero = 0
GROUP BY
livesync_dbname,
category_id,
category_price,
category_meters,
case when ads <= 20 then 20 when ads <= 50 then 50 when ads <= 100 then 100 else 101 end,
case when round(final_price) <= 5 then round(final_price)
when round(final_price) <= 10 then 10
when round(final_price) <= 20 then 20
when round(final_price) <= 50 then 50
when round(final_price) <= 100 then 100
else 101 end ,

case when round(final_meters) <= 5 then round(final_meters)
when round(final_meters) <= 10 then 10
when round(final_meters) <= 20 then 20
when round(final_meters) <= 50 then 50
when round(final_meters) <= 100 then 100
else 101 end,
price_zero,
meters_zero


select * from ads_vs_averages where ads >20 and final_meters > 100
