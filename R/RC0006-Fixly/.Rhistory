# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
tab_main <-fluidRow(
# first box for sales by quarter and region bar
box(
title = "Segment Description"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,dataTableOutput("MainDescription")
,h6(paste0("Gold - ",df_desc[1,8]))
,h6(paste0("Gold - ",df_desc[2,8]))
,h6(paste0("Gold - ",df_desc[3,8]))
,h6(paste0("Gold - ",df_desc[4,8]))
,h6(paste0("Gold - ",df_desc[5,8]))
)
# second box for sales by year and region bar
,box(
title = "Percent of Segments"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("MainHeatMap", height = "300px")
)
)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
library(treemap)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
# load the shinydashboard package
library(shiny)
require(shinydashboard)
library(ggplot2)
library(plyr)
library(treemap)
library(DT)
#source the components of the app
source(file="data/data.R")
source(file="header/header.R")
source(file="sidebar/sidebar.R")
source(file="body/body.R")
# create the user interface for the dashboard
# all shiny dashboards have the same three basic layout elements:
# a header
# a sidebar
# a body
ui <- dashboardPage(header, sidebar, body, skin="purple")
# create the server functions for the dashboard
server <- function(input, output) {
server_dashboard(input, output)
server_overlap(input, output)
}
# render the dashboard as a shiny app
shinyApp(ui, server)
